generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  nome         String
  username     String
  email        String      @unique
  senha        String
  telefone     String
  role         Role
  criadoEm     DateTime    @default(now())
  atualizadoEm DateTime    @updatedAt
  alugueis     Aluguel[]
  favoritos    Favoritos[]
  imoveis      Imovel[]
  session      Session[]
}

model Favoritos {
  id           String   @id @default(uuid())
  userId       String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Imovel {
  id              String        @id @default(uuid())
  titulo          String
  descricao       String
  preco           Float
  proprietarioId  String
  endereco        String
  provincia       String
  municipio       String
  bairro          String
  numeroQuarto    Int
  numeroCasaBanho Int
  garagem         Int
  tipologia       String
  latitude        Float
  longitude       Float
  alugueis        Aluguel[]
  imagens         Imagem[]
  proprietario    User          @relation(fields: [proprietarioId], references: [id])
  criadoEm        DateTime      @default(now())
  atualizadoEm    DateTime      @updatedAt
}

model Imagem {
  id           String   @id @default(uuid())
  url          String
  imovelId     String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  imovel       Imovel   @relation(fields: [imovelId], references: [id])
}

model Contrato {
  id             String   @id @default(uuid())
  aluguelId      String   @unique
  dataInicio     DateTime
  dataFim        DateTime
  valorTotal     Float
  termosContrato String
  urlDocumento   String?
  criadoEm       DateTime @default(now())
  atualizadoEm   DateTime @updatedAt
  aluguel        Aluguel  @relation(fields: [aluguelId], references: [id])
}

model Aluguel {
  id             String    @id @default(uuid())
  imovelId       String
  inquilinoId    String
  periodoAluguel Int
  contratoUrl    String?
  criadoEm       DateTime  @default(now())
  atualizadoEm   DateTime  @updatedAt
  imovel         Imovel    @relation(fields: [imovelId], references: [id])
  inquilino      User      @relation(fields: [inquilinoId], references: [id])
  contrato       Contrato?
}

model Proximidade {
  id           String   @id @default(uuid())
  nome         String
  tipo         String
  latitude     Float
  longitude    Float
  distancia    Float
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

enum Role {
  INQUILINO
  PROPRIETARIO
  ADMIN
}

enum TipoAluguel {
  RESIDENCIAL
  TURISTICO
}
